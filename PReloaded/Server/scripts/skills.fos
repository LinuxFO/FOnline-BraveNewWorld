//
// FOnline: 2238
// Rotators
//
// skills.fos
//

// This script contains global handlers for use of some skills.

#include "_macros.fos"
#include "MsgStr.h"
#include "utils_h.fos"
#include "reputations_h.fos"

Item@ SelectSkillItem(Critter& cr, Item@ item, uint16 skill)
{
    Item@ handItem = _CritGetItemHand(cr);
    if(valid(handItem) && handItem.Proto.Misc_ToolSkillNum == skill)
        return handItem;
    return item;
}

Item@ SelectSkillItemExt(Critter& cr, Item@ item, uint16 skill)
{
    Item@ handItem = _CritGetItemHandExt(cr);
    if(valid(handItem) && handItem.Proto.Misc_ToolSkillNum == skill)
        return handItem;
    return item;
}


bool UseFirstAidOnCritter(Critter& cr, Critter& targetCr, Item@ item)
{
/*
    if(valid(cr.GetMap()) && cr.GetMap().IsTurnBased())
    {
        cr.Say(SAY_NETMSG, "This skill cannot be used during turn-based combat.");
        return true;
    }
*/

    bool isSelf = (targetCr.Id == cr.Id);
    bool isMedic = cr.Perk[PE_MEDIC] > 0;
    bool isFieldMedic = cr.Perk[PE_FIELD_MEDIC] > 0;

    if (targetCr.IsDead()) {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NORESSURECT);
        return true;
    }

    if (!_CritNeedFirstAid(targetCr)) {
        if (_CritNeedDoctor(targetCr)) {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NOFIRSTAID_NEEDDOCTOR);
        } else if (isSelf) {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NONEED_FIRSTAID);
        }
        return true;
    }

    if (targetCr.Timeout[TO_SK_FIRST_AID] > 0) {
        if (cr.IsPlayer())
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS);
        return false;
    }

    if (!isSelf && cr.Param[MODE_HIDE] != 0 && cr.GetAccess() < ACCESS_TESTER) {
        cr.ParamBase[MODE_HIDE] = 0;
    }

    int sk = cr.Skill[SK_FIRST_AID];
    int itemFactor = 0;

    @item = SelectSkillItem(cr, item, SK_FIRST_AID);
    if (!valid(item)) {
        @item = SelectSkillItemExt(cr, item, SK_FIRST_AID);
    }
    if (valid(item)) {
        sk += item.Proto.Misc_ToolSkillBonus;
        int roll = Random(1, 10 + (cr.SkillBase[SK_FIRST_AID] / 20) + cr.PerkBase[PE_MEDIC] * 5 + cr.PerkBase[PE_FIELD_MEDIC] * 5);
        //Log("FA ITEM DELETE ROLL = " + roll);
        if (roll == 1) {
            cr.DeleteItem(item.GetProtoId(), 1);
            cr.Say(SAY_NETMSG, "You emptied and used up your First Aid kit.");
        }
        itemFactor = 10;
    }

    int curHp = targetCr.Stat[ST_CURRENT_HP];
    int maxHp = targetCr.Stat[ST_MAX_LIFE];
    int heal = 0;
    int healFactor = 100;
    if (isSelf) {
        healFactor = 30;
    } else {
        healFactor = 45;
    }
    if (isMedic) {
        healFactor += 5;
    }
    if (isFieldMedic) {
        healFactor += 5;
    }
    healFactor += itemFactor;

    heal = CLAMP((maxHp - curHp) * healFactor / 100, 0, 20 + (cr.SkillBase[SK_FIRST_AID] / 4) + (isMedic ? 25 : 0) + (isFieldMedic ? 25 : 0) + itemFactor * 3);
    if (curHp + heal > maxHp) {
        heal = maxHp - curHp;
    }
    //  BNW MECHANICS CHANGE: see issue #110 https://github.com/Sasabmeg/FOnline-BraveNewWorld/issues/110
    //  Plasma damage will reduce healing for a short period of time
    if (targetCr.ParamBase[TO_EX_IRREMEDIABLE] + PLASMA_EFFECT_LINGER_TIME > int(GetTick())) {
        if (targetCr.ParamBase[ST_EX_IRREMEDIABLE] > 0) {
            int healReduce = CLAMP(targetCr.ParamBase[ST_EX_IRREMEDIABLE], 0, 75);
            int mdc = cr.Perk[PE_MEDIC] > 0 ? 1 : 0;
            int fmdc = cr.Perk[PE_FIELD_MEDIC] > 0 ? 1 : 0;
            healReduce = (healReduce * (3 - mdc - fmdc)) / 3;
            float healFactor = float(CLAMP(100 - healReduce, 25, 100)) / 100;
            int oldAmount = heal;
            heal = heal * healFactor;
            //cr.Say(SAY_NETMSG, "Heal factor = " + healFactor + ", healReduce = " + healReduce + ", irremediable% = " + targetCr.ParamBase[ST_EX_IRREMEDIABLE] + ", oldAmount = " + oldAmount + ", newAmount = " + heal);
            //Log("Heal factor = " + healFactor + "healReduce = " + healReduce + ", irremediable% = " + targetCr.ParamBase[ST_EX_IRREMEDIABLE] + ", oldAmount = " + oldAmount + ", newAmount = " + heal);
        }
    }
    //  BNW MECHANICS CHANGE END

    if (heal < 1)
        heal = 1;

    targetCr.StatBase[ST_CURRENT_HP] += heal;
    //  if TB then no heal over time from FA
    if (valid(cr.GetMap()) && !cr.GetMap().IsTurnBased()) {
        targetCr.EraseTimeEvents(CTE_FIRST_AID);
        targetCr.AddTimeEvent("cte_FirstAid", REAL_SECOND(5), CTE_FIRST_AID, 4 * 10000 + heal / 4);
    }
    //  Floating healing text.
    FloatingHealText(targetCr, heal, HEAL_TEXT_REASON_FIRSTAID, SKILL_CHECK_SUCCESS);

    cr.Say(SAY_NETMSG, "First Aid: +" + heal);
    if (!isSelf) {
        targetCr.Say(SAY_NETMSG, "First Aid: +" + heal);
    }
    _SetTimeout(targetCr, TO_SK_FIRST_AID, FIRST_AID_TIMEOUT(cr));

    int healXpFactor = 1;
    if (targetCr.IsNpc()) {
        healXpFactor *= 3;
    }
    if (isFieldMedic) {
        healXpFactor *= 2;
    } else if (isMedic) {
        healXpFactor *= 1.5;
    }
    cr.StatBase[ST_EXPERIENCE] += heal * healXpFactor;
    if (_IsTrueNpc(targetCr) && cr.Id != targetCr.Id && IsHumanoid(targetCr) && !IsCurrentEnemy(targetCr, cr.Id)) {
        if (_ValidReputationIndex(targetCr.Stat[ST_TEAM_ID])) {
            AddReputation(cr, targetCr.Stat[ST_TEAM_ID], heal / 20, REP_FIRST_AID_CAP);
        }
        if (cr.IsSeenBy(targetCr)) {
            targetCr.Say(SAY_NORM_ON_HEAD, "Thank you.");
        }
    }

    if (cr.IsPlayer()) {
        AddScore(cr, SCORE_DOCTOR, 1);
    }

    return true;
}

uint cte_FirstAid(Critter& cr, int identifier, uint& rate) {
    //Log("cte_FirstAid :: identifier = " + identifier + ", rate = " + rate);
    int heal = rate % 10000;
    int curHp = cr.Stat[ST_CURRENT_HP];
    int maxHp = cr.Stat[ST_MAX_LIFE];
    if (curHp + heal > maxHp) {
        heal = maxHp - curHp;
    }
    if (heal <= 0) {
        return 0;
    }
    cr.StatBase[ST_CURRENT_HP] += heal;
    FloatingHealText(cr, heal, HEAL_TEXT_REASON_FIRSTAID, SKILL_CHECK_SUCCESS);
    cr.Say(SAY_NETMSG, "First Aid regeneration: +" + heal);
    if (cr.Stat[ST_CURRENT_HP] >= cr.Stat[ST_MAX_LIFE]) {
        return 0;
    }
    if ((rate / 10000) - 1 <= 0) {
        return 0;
    } else {
        rate = (((rate / 10000) - 1) * 10000) + heal;
        return REAL_SECOND(5);
    }
}

bool UseDoctorOnCritter(Critter& cr, Critter& targetCr, Item@ item)
{
/*
    if(valid(cr.GetMap()) && cr.GetMap().IsTurnBased())
    {
        cr.Say(SAY_NETMSG, "This skill cannot be used during turn-based combat.");
        return true;
    }
*/

    bool is_self = (targetCr.Id == cr.Id);
    bool is_ko = targetCr.IsKnockout() && targetCr.Stat[ST_CURRENT_HP] > 0;
    bool is_injured = _CritNeedDoctor(targetCr);
    bool is_field_medic = cr.Perk[PE_FIELD_MEDIC] != 0 && !is_self && targetCr.IsPlayer();

    if(targetCr.IsDead())
    {
        cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NORESSURECT);
        return true;
    }

    if(!is_injured && !is_ko)
    {
        if(_CritNeedFirstAid(targetCr))
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NODOCTOR_NEEDFIRSTAID);
        else if(is_self)
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NONEED_DOCTOR);
        return true;
    }

    if((cr.Timeout[TO_SK_DOCTOR] > 0 && !is_field_medic) || (is_field_medic && targetCr.Timeout[TO_SK_DOCTOR] > 0))
    {
        if(is_ko && cr.Perk[PE_MEDIC] != 0 )      //can heal KO even with cooldown with Medic perk
        {
            targetCr.StatBase[ST_CURRENT_AP] = 0;

            if(!is_self && cr.Param[MODE_HIDE] != 0 && cr.GetAccess() < ACCESS_TESTER)
                cr.ParamBase[MODE_HIDE] = 0;
        }

        if(cr.IsPlayer() && is_injured)
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_WEARINESS);
        return true;
    }

    if(!is_self && cr.Param[MODE_HIDE] != 0 && cr.GetAccess() < ACCESS_TESTER)
        cr.ParamBase[MODE_HIDE] = 0;

    int sk = cr.Skill[SK_DOCTOR];

    @item = SelectSkillItem(cr, item, SK_DOCTOR);
    if(valid(item))
    {
        sk += item.Proto.Misc_ToolSkillBonus;
        if(Random(0, 30) == 0)
            cr.DeleteItem(item.GetProtoId(), 1);
    }

    int uninjured = 0;
    int injured = 0;

    for(int i = DAMAGE_EYE; i <= DAMAGE_LEFT_LEG; ++i)
    {
        if(!_CritHasInjureBody(targetCr, i))
            continue;
        injured++;
        if(sk > Random(5, 95))
        {
            _CritUninjureBody(targetCr, i);
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_HEAL_DMG(i - DAMAGE_POISONED));
            uninjured++;
        }
        else
        {
            cr.SayMsg(SAY_NETMSG, TEXTMSG_GAME, STR_SKILL_NOHEAL_DMG(i - DAMAGE_POISONED));
        }
        sk -= 35;
    }

    if(is_ko) //heals KO
    {
        targetCr.StatBase[ST_CURRENT_AP] = 0;
    }

    if(is_injured || (is_ko && cr.Perk[PE_MEDIC] == 0))
    {
        if(is_field_medic)
            _SetTimeout(targetCr, TO_SK_DOCTOR, DOCTOR_TIMEOUT(cr));
        else
            _SetTimeout(cr, TO_SK_DOCTOR, DOCTOR_TIMEOUT(cr));
    }

    if(uninjured > 0)
    {
        if(is_self)
            VerboseAction(cr, "applies wound dressing" + (uninjured > 1 ? "s" : ""));
        else
            VerboseAction(cr, targetCr, "treats injur" + (uninjured > 1 ? "ies" : "y") + " of TARGET");
        cr.StatBase[ST_EXPERIENCE] += uninjured * 50;
        if(_IsTrueNpc(targetCr) && !is_self && IsHumanoid(targetCr) && !IsCurrentEnemy(targetCr, cr.Id))
        {
            if(_ValidReputationIndex(targetCr.Stat[ST_TEAM_ID]))
                AddReputation(cr, targetCr.Stat[ST_TEAM_ID], uninjured * 8, REP_DOCTOR_CAP);
            if(cr.IsSeenBy(targetCr))
                targetCr.Say(SAY_NORM_ON_HEAD, "Thank you.");
        }
    }
    else
    {
        /*if( is_self )
                VerboseAction( cr, "TODO uninjured=0 is_self" );
           else
                VerboseAction( cr, targetCr, "TODO uninjured=0 TARGET" );*/
    }

    if(cr.IsPlayer() && is_injured)
    {
        AddScore(cr, SCORE_DOCTOR, uninjured);
    }
    return true;
}
